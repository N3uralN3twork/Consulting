final["Subject"] =  gsub("[a-zA-Z]+", "", final[, 1]) # remove letters with regex
final["Group"] = substr(final[, 1], nchar(final[, 1]), nchar(final[, 1]))
# Remove the repetitive column:
final = final %>% select(Code, Site, Subject, Group) # Using dplyr's built-in pipe (%>%) operator
# Return the end result:
return(final)
}
test1 <- schema(Sites = c("AAA"), NSubjects = 10, RRatio = "1:1", seed = TRUE)
# install.packages("tidyverse")
library(tidyverse) # For the unite and row_number functions
test1 <- schema(Sites = c("AAA"), NSubjects = 10, RRatio = "1:1", seed = TRUE)
test2 <- schema(Sites = 1, NSubjects = 10, RRatio = 1)
test3 <- schema(Sites = c("AAA"), NSubjects = 30, RRatio = 2)
test4 <- schema(Sites = 2, NSubjects = 30, RRatio = 2)
test5 <- schema(Sites = c("AAA", "BBB"), NSubjects = 10, RRatio = 1)
test6 <- schema(Sites = NULL, NSubjects = 10, RRatio = 1) # Should return error
test7 <- schema(Sites = c("AAA", 1), NSubjects = 10, RRatio = 1)
tolower("HELLO world!")
test6 <- schema(Sites = NULL, NSubjects = 10, RRatio = 1) # Should return error
require("randomizeR") #package necessary for "pbrpar" function in line 33, "genSeq" in line 34, and "getRandList" in line 35
require("stringr") #package necessary for "str_pad" function in line 31
#select run to begin prompts
schema <- function(){
t <- readline("How many treatment sites to you have? ")
s <- readline("How many subjects do you have at each site? ")
b <- readline("How many subjects are in each block? ")
r <- readline("Specify a ratio for treatment to control t:c ")
sd <- readline("Set a seed number for reproducibility ")
t <- as.numeric(unlist(strsplit(t, ",")))  #t will represent number of sites
s <- as.numeric(unlist(strsplit(s, ",")))  #s will represent number of subjects at each site
b <- as.numeric(unlist(strsplit(b, ",")))  #b will represent the number of subjects in each block
r <- (unlist(strsplit(r, ":")))            #ratio will be given in form t:c, need to get "t" and "c" separately
n <- as.numeric(r[1])                      #n will represent number of treatments from ratio
d <- as.numeric(r[2])                      #d will represent number of controls from ratio
sd <- as.numeric(unlist(strsplit(sd, ",")))
df1 <- data.frame(Site=character(), Subject=integer())  #create empty data frame
sub<- seq(1:s) #list of subjects
for (i in b) {
blk<-s/b  #compute number of blocks
if (s %% b !=0 | s %% t !=0 ){
print("Enter valid parameter")    #if condition is not met, error message will occur
}
}
sub<-str_pad(sub,width=2,side="left",pad="0") #to get #'s < 10 to be of the form "0#"
bc<-rep(b,blk)    #vector that contains block size, number of blocks times
ab<-pbrPar(bc, K = 2, ratio = c(n,d), groups = c("T","C"))  #function to randomly assign treatment and control using the appropriate ratio
seq1<-genSeq(ab,t,seed=sd)   #get the random sequence generated by pbrPar function
list1 <- getRandList(seq1)
for (i in c(1:t)) {           #loop to create site names and data frame
sites<-rep(LETTERS[i],3)           #repeat letters 3 times e.g. A A A
sites<-paste(sites, collapse="")     #put letters together e.g. 'AAA'
tempdf <- data.frame(Site=as.vector(rep(sites, length(sub))),
Subject=as.vector(sub))    #create temporary data frame to store values during loop
df1 <- rbind(df1, tempdf)   #combine empty data frame with temporary data frame
}
df1$Condition=as.vector(t(getRandList(seq1)))  #add a new column to the data frame
print(df1)    #print the schema
write.csv(df1, file = "Schema.csv")
}
schema()   #prompts will begin
schema()   #prompts will begin
#select run to begin prompts
schema <- function(){
t <- readline("How many treatment sites to you have? ")
s <- readline("How many subjects do you have at each site? ")
b <- readline("How many subjects are in each block? ")
r <- readline("Specify a ratio for treatment to control t:c ")
sd <- readline("Set a seed number for reproducibility ")
t <- as.numeric(unlist(strsplit(t, ",")))  #t will represent number of sites
s <- as.numeric(unlist(strsplit(s, ",")))  #s will represent number of subjects at each site
b <- as.numeric(unlist(strsplit(b, ",")))  #b will represent the number of subjects in each block
r <- (unlist(strsplit(r, ":")))            #ratio will be given in form t:c, need to get "t" and "c" separately
n <- as.numeric(r[1])                      #n will represent number of treatments from ratio
d <- as.numeric(r[2])                      #d will represent number of controls from ratio
sd <- as.numeric(unlist(strsplit(sd, ",")))
df1 <- data.frame(Site=character(), Subject=integer())  #create empty data frame
sub<- seq(1:s) #list of subjects
for (i in b) {
blk<-s/b  #compute number of blocks
if (s %% b !=0 | s %% t !=0 ){
print("Enter valid parameter")    #if condition is not met, error message will occur
}
}
sub<-str_pad(sub,width=2,side="left",pad="0") #to get #'s < 10 to be of the form "0#"
bc<-rep(b,blk)    #vector that contains block size, number of blocks times
ab<-pbrPar(bc, K = 2, ratio = c(n,d), groups = c("T","C"))  #function to randomly assign treatment and control using the appropriate ratio
seq1<-genSeq(ab,t,seed=sd)   #get the random sequence generated by pbrPar function
list1 <- getRandList(seq1)
for (i in c(1:t)) {           #loop to create site names and data frame
sites = rep(LETTERS[i],3)           #repeat letters 3 times e.g. A A A
sites = paste(sites, collapse="")     #put letters together e.g. 'AAA'
tempdf =  data.frame(Site=as.vector(rep(sites, length(sub))),
Subject=as.vector(sub))    #create temporary data frame to store values during loop
df1 = rbind(df1, tempdf)   #combine empty data frame with temporary data frame
}
df1$Condition=as.vector(t(getRandList(seq1)))  #add a new column to the data frame
print(df1)    #print the schema
write.csv(df1, file = "Schema.csv")
}
rm(schema)
sum(NA, 1, 2, 3)
length(c(1, 2, NA))
ls <- c(1,1,1,0,0,0)
sample(ls)
sample(ls)
sample(ls)
sample(ls)
sample(ls)
sample(ls)
sample(ls, replace = FALSE)
ls <- c(1,1,1,0,0,0,1,1,0,0)
sample(ls, replace = FALSE)
rep(ls, each=10)
rep(sample(ls, replace = FALSE), each=10)
rep(sample(ls, replace = FALSE), times=10)
rep(sample(ls, replace = FALSE), times=10)
rep(rep(sample(ls, replace = FALSE), times=10), times = 3)
ls <- c(1,0,0,1,0,0,1,00)
sample(ls, replace = FALSE)
ls <- c(1,0,0,1,0,0,1,0,0)
sample(ls, replace = FALSE)
2%%1
integer(x)%%1
x%%1==0
x=3.2
x%%1==0
is.integer(2)
ls <- c(1, 2, 3, 4, 10)
ls <- c(1, 2, 3, 4, 10.2)
lapply(ls, x%%1)
lapply(ls, is.integer())
lapply(ls, is.integer)
ls <- c(1, 2, 3, 4, 10.2)
lapply(ls, is.integer)
36*2
factorial(10)/72
210/500
216/500
97/500
0.42+0.432
-0.194
0.852-0.194
# Replace decimals with NA:
3 % 1 !=0
# Replace decimals with NA:
3%1 !=0
# Replace decimals with NA:
3%%1 !=0
# Replace decimals with NA:
3%1 !=0
# Replace decimals with NA:
3%%1 !=0
3.5%%1 !=0
setwd("C:/Users/miqui/OneDrive/CSU Classes/Consulting/SF-36")
library(readxl)
library(dplyr)
df <- read_excel("Practice SF-36 data.xlsx",
sheet = "data")
#View(df)
data <- df
Questions <- c('Q1', 'Q2', 'Q3a', 'Q3b', 'Q3c',
'Q3d', 'Q3e', 'Q3f', 'Q3g', 'Q3h',
'Q3i', 'Q3j', 'Q4a', 'Q4b', 'Q4c',
'Q4d', 'Q5a', 'Q5b', 'Q5c', 'Q6',
'Q7', 'Q8', 'Q9a', 'Q9b', 'Q9c',
'Q9d', 'Q9e', 'Q9f', 'Q9g', 'Q9h',
'Q9i', 'Q10', 'Q11a', 'Q11b', 'Q11c', 'Q11d')
str(df[Questions])
# Replace negative numbers with NA
df[df %in% seq(-100000, 0)] <- NA
# Replace characters NA:
df[is.character(df)] <- NA
View(df)
# Replace negative numbers with NA
df[df %in% seq(-1000, 0)] <- NA
# Replace negative numbers with NA
df[df < 0] <- NA
# Replace decimals with NA:
df[df%%1==0] <- NA
# Replace decimals with NA:
df[df%%1] <- NA
# Replace decimals with NA:
df[is.integer(df)] <- NA
# Replace decimals with NA:
df[df %=1 ]
# Replace decimals with NA:
df[df%%=1]
# Replace decimals with NA:
df[df%%==1]
# Replace decimals with NA:
df[df%%1==1]
#install.packages("DistributionUtils")
#install.packages("sjmisc")
library(DistributionUtils)
# Replace decimals with NA:
df[is.wholenumber(df)]
# Replace decimals with NA:
df[!is.wholenumber(df)] <- NA
setwd("C:/Users/miqui/OneDrive/CSU Classes/Consulting/SF-36")
library(readxl)
library(dplyr)
library(DistributionUtils)
df <- read_excel("Practice SF-36 data.xlsx",
sheet = "data")
#View(df)
data <- df
Questions <- c('Q1', 'Q2', 'Q3a', 'Q3b', 'Q3c',
'Q3d', 'Q3e', 'Q3f', 'Q3g', 'Q3h',
'Q3i', 'Q3j', 'Q4a', 'Q4b', 'Q4c',
'Q4d', 'Q5a', 'Q5b', 'Q5c', 'Q6',
'Q7', 'Q8', 'Q9a', 'Q9b', 'Q9c',
'Q9d', 'Q9e', 'Q9f', 'Q9g', 'Q9h',
'Q9i', 'Q10', 'Q11a', 'Q11b', 'Q11c', 'Q11d')
str(df[Questions])
# Replace negative numbers with NA
df[df < 0] <- NA
# Replace characters NA:
df[is.character(df)] <- NA
View(df)
setwd("C:/Users/miqui/OneDrive/CSU Classes/Consulting/SF-36")
library(readxl)
library(dplyr)
library(DistributionUtils)
df <- read_excel("Practice SF-36 data.xlsx",
sheet = "data")
#View(df)
data <- df
Questions <- c('Q1', 'Q2', 'Q3a', 'Q3b', 'Q3c',
'Q3d', 'Q3e', 'Q3f', 'Q3g', 'Q3h',
'Q3i', 'Q3j', 'Q4a', 'Q4b', 'Q4c',
'Q4d', 'Q5a', 'Q5b', 'Q5c', 'Q6',
'Q7', 'Q8', 'Q9a', 'Q9b', 'Q9c',
'Q9d', 'Q9e', 'Q9f', 'Q9g', 'Q9h',
'Q9i', 'Q10', 'Q11a', 'Q11b', 'Q11c', 'Q11d')
str(df[Questions])
# Replace negative numbers with NA
df[df < 0] <- NA
View(df)
setwd("C:/Users/miqui/OneDrive/CSU Classes/Consulting/SF-36")
library(readxl)
library(dplyr)
library(DistributionUtils)
df <- read_excel("Practice SF-36 data.xlsx",
sheet = "data")
setwd("C:/Users/miqui/OneDrive/CSU Classes/Consulting/SF-36")
library(readxl)
library(dplyr)
library(DistributionUtils)
df <- read_excel("Practice SF-36 data.xlsx",
sheet = "data")
#View(df)
data <- df
Questions <- c('Q1', 'Q2', 'Q3a', 'Q3b', 'Q3c',
'Q3d', 'Q3e', 'Q3f', 'Q3g', 'Q3h',
'Q3i', 'Q3j', 'Q4a', 'Q4b', 'Q4c',
'Q4d', 'Q5a', 'Q5b', 'Q5c', 'Q6',
'Q7', 'Q8', 'Q9a', 'Q9b', 'Q9c',
'Q9d', 'Q9e', 'Q9f', 'Q9g', 'Q9h',
'Q9i', 'Q10', 'Q11a', 'Q11b', 'Q11c', 'Q11d')
str(df[Questions])
# Replace negative numbers with NA
df[df < 0] <- NA
# Replace characters NA:
df[is.character(df)] <- NA
is.wholenumber(df)
is.wholenumber(df[df])
is.wholenumber(5.4)
is.wholenumber(5)
for(i in 1:nrow(df))
{
for(j in 2:ncol(df))
{
if(is.wholenumber(df[i,j]))
{
df[i,j] = df[i,j]
}
else
{
df[i,j] = NA
}
}
}
setwd("C:/Users/miqui/OneDrive/CSU Classes/Consulting/SF-36")
library(readxl)
library(dplyr)
library(DistributionUtils)
df <- read_excel("Practice SF-36 data.xlsx",
sheet = "data")
#View(df)
data <- df
Questions <- c('Q1', 'Q2', 'Q3a', 'Q3b', 'Q3c',
'Q3d', 'Q3e', 'Q3f', 'Q3g', 'Q3h',
'Q3i', 'Q3j', 'Q4a', 'Q4b', 'Q4c',
'Q4d', 'Q5a', 'Q5b', 'Q5c', 'Q6',
'Q7', 'Q8', 'Q9a', 'Q9b', 'Q9c',
'Q9d', 'Q9e', 'Q9f', 'Q9g', 'Q9h',
'Q9i', 'Q10', 'Q11a', 'Q11b', 'Q11c', 'Q11d')
str(df[Questions])
# Replace negative numbers with NA
df[df < 0] <- NA
# Replace characters NA:
df[is.character(df)] <- NA
is.wholenumber(3.0)
for(i in 1:nrow(df))
{
for(j in 2:ncol(df))
{
if(is.wholenumber(df[i,j])==TRUE)
{
df[i,j] = df[i,j]
}
else
{
df[i,j] = NA
}
}
}
for(i in 1:nrow(df))
{
for(j in 2:ncol(df))
{
if(is.wholenumber(df[i,j])==1)
{
df[i,j] = df[i,j]
}
else
{
df[i,j] = NA
}
}
}
setwd("C:/Users/miqui/OneDrive/CSU Classes/Consulting/SF-36")
library(readxl)
library(dplyr)
library(DistributionUtils)
df <- read_excel("Practice SF-36 data.xlsx",
sheet = "data")
#View(df)
data <- df
Questions <- c('Q1', 'Q2', 'Q3a', 'Q3b', 'Q3c',
'Q3d', 'Q3e', 'Q3f', 'Q3g', 'Q3h',
'Q3i', 'Q3j', 'Q4a', 'Q4b', 'Q4c',
'Q4d', 'Q5a', 'Q5b', 'Q5c', 'Q6',
'Q7', 'Q8', 'Q9a', 'Q9b', 'Q9c',
'Q9d', 'Q9e', 'Q9f', 'Q9g', 'Q9h',
'Q9i', 'Q10', 'Q11a', 'Q11b', 'Q11c', 'Q11d')
str(df[Questions])
# Replace negative numbers with NA
df[df < 0] <- NA
# Replace characters NA:
df[is.character(df)] <- NA
# Replace decimals with NA:
for(i in 1:nrow(df))
{
for(j in 2:ncol(df))
{
if(is.wholenumber(df[i,j])==1)
{
df[i,j] = df[i,j]
}
else
{
df[i,j] = NA
}
}
}
for (i in 1:nrow(df)){
for (j in 2:ncol(df)){
is.wholenumber(df[i, j])
}}
for (i in 1:nrow(df)){
for (j in 2:ncol(df)){
is.wholenumber(df[i, j]==TRUE)
}
}
for (i in 1:nrow(df)){
for (j in 2:ncol(df)){
is.wholenumber(df[i, j]==NA)
}
}
setwd("C:/Users/miqui/OneDrive/CSU Classes/Consulting/SF-36")
library(readxl)
library(dplyr)
library(DistributionUtils)
df <- read_excel("Practice SF-36 data.xlsx",
sheet = "data")
#View(df)
data <- df
Questions <- c('Q1', 'Q2', 'Q3a', 'Q3b', 'Q3c',
'Q3d', 'Q3e', 'Q3f', 'Q3g', 'Q3h',
'Q3i', 'Q3j', 'Q4a', 'Q4b', 'Q4c',
'Q4d', 'Q5a', 'Q5b', 'Q5c', 'Q6',
'Q7', 'Q8', 'Q9a', 'Q9b', 'Q9c',
'Q9d', 'Q9e', 'Q9f', 'Q9g', 'Q9h',
'Q9i', 'Q10', 'Q11a', 'Q11b', 'Q11c', 'Q11d')
str(df[Questions])
# Replace negative numbers with NA
df[df < 0] <- NA
# Replace characters NA:
df[is.character(df)] <- NA
for(i in 1:row_count)
{
for(j in 2:col_count)
{
if(is.na(data[i,j]))
{
data[i,j] = NA
next(j)
#code it as negative one to all the program to continue to run
}
if(data[i,j] < 0)
{
data[i,j] = NA
next(j)
}
if(is.wholenumber(data[i,j]))
{
data[i,j] = data[i,j]
}
else
{
data[i,j] = NA
}
}
}
for(i in 1:nrow(df))
{
for(j in 2:ncol(df))
{
if(is.na(df[i,j]))
{
df[i,j] = NA
next(j)
#code it as negative one to all the program to continue to run
}
if(df[i,j] < 0)
{
df[i,j] = NA
next(j)
}
if(is.wholenumber(df[i,j]))
{
df[i,j] = df[i,j]
}
else
{
df[i,j] = NA
}
}
}
setwd("C:/Users/miqui/OneDrive/CSU Classes/Consulting/SF-36")
library(readxl)
library(dplyr)
library(DistributionUtils)
df <- read_excel("Practice SF-36 data.xlsx",
sheet = "data")
#View(df)
data <- df
Questions <- c('Q1', 'Q2', 'Q3a', 'Q3b', 'Q3c',
'Q3d', 'Q3e', 'Q3f', 'Q3g', 'Q3h',
'Q3i', 'Q3j', 'Q4a', 'Q4b', 'Q4c',
'Q4d', 'Q5a', 'Q5b', 'Q5c', 'Q6',
'Q7', 'Q8', 'Q9a', 'Q9b', 'Q9c',
'Q9d', 'Q9e', 'Q9f', 'Q9g', 'Q9h',
'Q9i', 'Q10', 'Q11a', 'Q11b', 'Q11c', 'Q11d')
str(df[Questions])
# Replace negative numbers with NA
df[df < 0] <- NA
# Replace characters NA:
df[is.character(df)] <- NA
# Replace decimals with NA:
for(i in 1:nrow(df))
{
for(j in 2:ncol(df))
{
if(is.na(df[i,j]))
{
df[i,j] = NA
next(j)
#code it as negative one to all the program to continue to run
}
if(df[i,j] < 0)
{
df[i,j] = NA
next(j)
}
if(is.wholenumber(df[i,j]))
{
df[i,j] = df[i,j]
}
else
{
df[i,j] = df[i, j]
}
}
}
# Replace decimals with NA:
lapply(df[Questions], sum)
# Replace decimals with NA:
lapply(df, sum)
# Replace decimals with NA:
lapply(df[Questions], sum)
# Replace decimals with NA:
lapply(df[Questions], sum(na.rm = TRUE))
# Replace decimals with NA:
mapply(is.wholenumber, df[Questions])
# Replace decimals with NA:
mapply(is.wholenumber, df[Questions, ])
# Replace decimals with NA:
mapply(is.wholenumber, df[, Questions ])
# Replace decimals with NA:
mapply(is.wholenumber, df[, Questions])
