install.packages(c("caret", "lavaan", "ggplot2", "dplyr"))
a <- 3
print(a)
# Building the design schema for 1 site:
SCHEMA <- function(prefix = "AAA", NSubjects, NSites=1, NFactors, RRatio=1){
row_count = (NSubjects * NSites)
col_count = (NFactors)
result <- vector("list", length = NSubjects)
for (i in seq(1, NSubjects)){
if (i < 10){
result[[i]] <- paste(prefix, i, sep = "0")
} else {
result[[i]] <- paste(prefix, i, sep = "")}}
result <- t(as.data.frame(result))
TLC = data.frame(TorC = sample(t(rep(c("T", "C"), times = c(5, 5)))))
mattrix <- matrix(nrow = row_count, ncol = col_count)
final = data.frame(ID = result, mattrix, row.names = NULL)
final = final[sample(nrow(final)), ]
final = data.frame(Order = 1:row_count, final)
final = data.frame(ID = paste(final$ID, TLC$TorC, sep = ""), Order = seq(1:row_count), mattrix, row.names = NULL)
return(final)
}
matt = SCHEMA(prefix = "AAA", NSubjects = 10, NFactors = 3, RRatio = 1)
View(matt)
# Multiple Sites:
library(dplyr)
library(magicfor)
test <- function(Sites = NULL, NSubjects){
matt = matrix(NA, nrow = length(Sites), ncol = NSubjects) # Start with an empty matrix
dimnames(matt) = list(Sites)
for (i in Sites){
for (j in NSubjects){
matt[i, ] = rep(i, NSubjects)
}
}
matt = as.data.frame(t(matt)) # Return the transpose of the matrix
return(matt)
}
asdf <- test(Sites = c("AAA", "BBB", "CCC", "DDD"), NSubjects = 20)
magic_for(print, silent = TRUE)
for (column in asdf){
result = if_else(row_number(column) < 10,
true = paste(column, "0", row_number(column), sep = ""),
false = paste(column, row_number(column), sep = ""))
print(result)
}
result <- magic_result_as_dataframe(iter = FALSE)
View(result)
View(result)
test <- function(Sites = NULL, NSubjects){
matt = matrix(NA, nrow = length(Sites), ncol = NSubjects) # Start with an empty matrix
dimnames(matt) = list(Sites)
for (i in Sites){
for (j in NSubjects){
matt[i, ] = rep(i, NSubjects)
}
}
matt = as.data.frame(t(matt)) # Return the transpose of the matrix
magic_for(print, silent = TRUE)
for (column in matt) {
result = if_else(row_number(column) < 10,
true = paste(column, "0", row_number(column), sep = ""),
false = paste(column, row_number(column), sep = ""))
print(result)
}
result = magic_result_as_dataframe(iter = FALSE)
}
test(Sites = c("AAA", "BBB"), NSubjects = 2)
test(Sites = c("AAA", "BBB"))
test(Sites = c("AAA", "BBB"), 2)
test <- function(Sites = NULL, NSubjects){
matt = matrix(NA, nrow = length(Sites), ncol = NSubjects) # Start with an empty matrix
dimnames(matt) = list(Sites)
for (i in Sites){
for (j in NSubjects){
matt[i, ] = rep(i, NSubjects)
}
}
matt = as.data.frame(t(matt)) # Return the transpose of the matrix
}
test(c("AAA", "BBB"), NSubjects = 5)
test(c("AAA", "BBB"), NSubjects = 5)
test <- function(Sites = NULL, NSubjects){
matt = matrix(NA, nrow = length(Sites), ncol = NSubjects) # Start with an empty matrix
dimnames(matt) = list(Sites)
for (i in Sites){
for (j in NSubjects){
matt[i, ] = rep(i, NSubjects)
}
}
matt = as.data.frame(t(matt)) # Return the transpose of the matrix
}
test(Sites = c("AAA", "BBB", "CCC", "DDD"), NSubjects = 20)
test <- function(Sites = NULL, NSubjects){
matt = matrix(NA, nrow = length(Sites), ncol = NSubjects) # Start with an empty matrix
dimnames(matt) = list(Sites)
for (i in Sites){
for (j in NSubjects){
matt[i, ] = rep(i, NSubjects)
}
}
matt = as.data.frame(t(matt)) # Return the transpose of the matrix
return(matt)
}
test(Sites = c("AAA", "BBB", "CCC", "DDD"), NSubjects = 20)
test <- function(Sites = NULL, NSubjects){
matt = matrix(NA, nrow = length(Sites), ncol = NSubjects) # Start with an empty matrix
dimnames(matt) = list(Sites)
for (i in Sites){
for (j in NSubjects){
matt[i, ] = rep(i, NSubjects)
}
}
matt = as.data.frame(t(matt)) # Return the transpose of the matrix
return(matt)
}
asdf <- test(Sites = c("AAA", "BBB", "CCC", "DDD"), NSubjects = 20)
schema <- function(Sites = NULL, NSubjects, RRatio = NULL, NFactors){
# Start with 2 empty data matrices:
matt = matrix(NA, nrow = length(Sites), ncol = NSubjects)
final = matrix(NA, nrow = length(Sites)*NSubjects, ncol = NFactors+1)
# Assign names to each column, otherwise you'll get an error:
dimnames(matt) = list(Sites)
# Assign numbers to each subject @ each site:
for (i in Sites){
for (j in NSubjects){
matt[i, ] = rep(i, times = NSubjects) # Row-wise
}
}
return(matt)
schema <- function(Sites = NULL, NSubjects, RRatio = NULL, NFactors){
# Start with 2 empty data matrices:
matt = matrix(NA, nrow = length(Sites), ncol = NSubjects)
final = matrix(NA, nrow = length(Sites)*NSubjects, ncol = NFactors+1)
# Assign names to each column, otherwise you'll get an error:
dimnames(matt) = list(Sites)
# Assign numbers to each subject @ each site:
for (i in Sites){
for (j in NSubjects){
matt[i, ] = rep(i, times = NSubjects) # Row-wise
}
}
return(matt)
asdf
asdf
}
)
schema <- function(Sites = NULL, NSubjects, RRatio = NULL, NFactors){
# Start with 2 empty data matrices:
matt = matrix(NA, nrow = length(Sites), ncol = NSubjects)
final = matrix(NA, nrow = length(Sites)*NSubjects, ncol = NFactors+1)
# Assign names to each column, otherwise you'll get an error:
dimnames(matt) = list(Sites)
# Assign numbers to each subject @ each site:
for (i in Sites){
for (j in NSubjects){
matt[i, ] = rep(i, times = NSubjects) # Row-wise
}
}
return(matt)}
FINAL <- schema(Sites = c("AAA", "BBB", "CCC"), NSubjects = 30, RRatio = 1, NFactors = 3)
View(FINAL)
schema <- function(Sites = NULL, NSubjects, RRatio = NULL, NFactors){
# Start with 2 empty data matrices:
matt = matrix(NA, nrow = length(Sites), ncol = NSubjects)
final = matrix(NA, nrow = length(Sites)*NSubjects, ncol = NFactors+1)
# Assign names to each column, otherwise you'll get an error:
dimnames(matt) = list(Sites)
# Assign numbers to each subject @ each site:
for (i in Sites){
for (j in NSubjects){
matt[i, ] = rep(i, times = NSubjects) # Row-wise
}
}
# Return the transpose of the matrix:
matt = as.data.frame(t(matt)) # Turn into a dataframe as well
return(matt)}
FINAL <- schema(Sites = c("AAA", "BBB", "CCC"), NSubjects = 30, RRatio = 1, NFactors = 3)
Rcpp::sourceCpp('C++ Test.cpp')
n =  5
2+3+1+5
total = 11
print((n*(n-1)//2)-total)
print((n*(n-1)/2)-total)
print(((n*(n-1))/2)-total)
1+2+3+4+5
remainder = (n*(n-1)/2)
sum = 11
total = (n*(n-1)/2)
rm(remainder)
total = (n*(n+1)/2)
sum(c(1, 2, 3, 5))
(5*6)//2
(5*6)/2
test <- function(NSites, NSubjects){
a = c()
for (letter in LETTERS){
result = rep(letter, times = 3)
result = paste(result, collapse = "")
a[letter] = result
}
return(rep(a, each=NSubjects)[seq(1, NSites*NSubjects)])
}
result <- t(test(NSites = 3, NSubjects = 10))
result
result <- t(test(NSites = 26, NSubjects = 10))
result
result <- t(test(NSites = 27, NSubjects = 10))
result
df <- data.frame(Sites = result)
df <- data.frame(Sites = t(result))
df
View(df)
# Works for up to 26 sites
test <- function(NSites, NSubjects){
a = c()
for (letter in LETTERS){
result = rep(letter, times = 3)
result = paste(result, collapse = "")
a[letter] = result
}
b = rep(a, each=NSubjects)[seq(1, NSites*NSubjects)]
}
result <- t(test(NSites = 27, NSubjects = 10))
result
test <- function(NSites, NSubjects){
a = c()
for (letter in LETTERS){
result = rep(letter, times = 3)
result = paste(result, collapse = "")
a[letter] = result
}
b = rep(a, each=NSubjects)[seq(1, NSites*NSubjects)]
return(b)
}
result <- t(test(NSites = 27, NSubjects = 10))
result
result <- t(test(NSites = 30, NSubjects = 10))
result
test <- function(NSites, NSubjects){
a = c()
for (letter in LETTERS){
result = rep(letter, times = 3)
result = paste(result, collapse = "")
a[letter] = result
}
b = t(rep(a, each=NSubjects)[seq(1, NSites*NSubjects)])
return(b)
}
result <- test(NSites = 30, NSubjects = 10)
result
df <- data.frame(Sites = t(result))
View(df)
rm(list = ls())
test <- function(Sites, NSubjects){
a = c()
for (letter in LETTERS){
result = rep(letter, times = 3)
result = paste(result, collapse = "")
a[letter] = result
}
b = t(rep(a, each = NSubjects)[seq(1, Sites*NSubjects)])
return(b)
}
result <- test(NSites = 30, NSubjects = 10)
df <- data.frame(Sites = t(result))
test <- function(Sites, NSubjects){
a = c()
for (letter in LETTERS){
result = rep(letter, times = 3)
result = paste(result, collapse = "")
a[letter] = result
}
b = t(rep(a, each = NSubjects)[seq(1, Sites*NSubjects)])
return(b)
}
result <- test(Sites = 30, NSubjects = 10)
df <- data.frame(Sites = t(result))
View(df)
library(testthat)
sqrt <- function(x){
return(sqrt(x))
}
test_that("Test sqrt function:", {
expected = 2
actual = sqrt(4)
expect_equal(expected, actual)
})
library(testthat)
test_that("Test sqrt function:", {
expected = 2
actual = sqrt_newton(4, 1)
expect_equal(expected, actual)
})
sqrt_newton <- function(a, init, eps = 0.01, iter = 100){
stopifnot(a >= 0)
i <- 1
while(abs(init**2 - a) > eps){
init <- 1/2 *(init + a/init)
i <- i + 1
if(i > iter) stop("Maximum number of iterations reached")
}
return(init)
}
test_that("Test sqrt function:", {
expected = 2
actual = sqrt_newton(4, 1)
expect_equal(expected, actual)
})
test_that("Test sqrt function:", {
expected = c(2, 4, 5)
actual = sqrt_newton(c(4, 16, 25), 1)
expect_equal(expected, actual)
})
test_that("Test sqrt function:", {
expected = c(2, 4, 5)
actual = sqrt_newton(c(4, 16, 25), 1)
expect_equal(expected, actual)
})
library(devtools)
devtools::create("myfirstpackage")
devtools::document()
library(devtools)
install.packages("devtools")
library(devtools)
install.packages("backports")
library(devtools)
install.packages("rlang")
library(Randomizations)
library(rlang)
library(tidyverse) # For the unite and row_number functions
library(devtools)
library(devtools)
library(ggplot2)
ggplot(data = diamonds, aes(x = carat)) +
geom_histogram()
library(Randomizations)
install.packages(c("libcoin", "pbapply", "StanHeaders"))
library(libcoin)
library(ggplot2)
library(Randomizations)
library(dplyr)
library(tidyverse)
install.packages("backports")
library(tidyverse)
library(Randomizations)
Randomizations::schema(Sites = c("AAA", "BBB"), NSubjects = 10, BlockSize = 5, RRatio = 1)
library(Randomizations)
schema(1, 10, 0, 1)
library(Randomizations)
schema(1,10,1,1)
library(Randomizations)
Randomizations::schema(Sites = c("AAA"), NSubjects = 10, BlockSize = NULL, RRatio = 1)
Randomizations::schema(Sites = c("AAA"), NSubjects = 10, BlockSize = NULL, RRatio = 1)
library(tidyverse)
Randomizations::schema(Sites = c("AAA"), NSubjects = 10, BlockSize = NULL, RRatio = 1)
install.packages("C:/Users/miqui/OneDrive/Consulting/Randomizations_1.0.tar.gz", repos = NULL, type = "source")
library(Randomizations)
library(Randomizations)
library(tidyverse)
Randomizations::schema(Sites = c("AAA"), NSubjects = 10, BlockSize = NULL, RRatio = 1)
setwd("C:/Users/miqui/OneDrive/Consulting/Randomizations")
library(tidyverse) # For the unite and row_number functions
setwd("C:/Users/miqui/OneDrive/Consulting/Randomizations")
library(devtools)
devtools::install_github("N3uralN3twork/myfirstpackage")
