matt = matrix(NA, nrow = length(Sites), ncol = NSubjects)
final = matrix(NA, nrow = length(Sites)*NSubjects, ncol = NFactors+1)
# Assign names to each column, otherwise you'll get an error:
dimnames(matt) = list(Sites)
# Assign numbers to each subject @ each site:
for (i in Sites){
for (j in NSubjects){
matt[i, ] = rep(i, times = NSubjects) # Row-wise
}
}
return(matt)
schema <- function(Sites = NULL, NSubjects, RRatio = NULL, NFactors){
# Start with 2 empty data matrices:
matt = matrix(NA, nrow = length(Sites), ncol = NSubjects)
final = matrix(NA, nrow = length(Sites)*NSubjects, ncol = NFactors+1)
# Assign names to each column, otherwise you'll get an error:
dimnames(matt) = list(Sites)
# Assign numbers to each subject @ each site:
for (i in Sites){
for (j in NSubjects){
matt[i, ] = rep(i, times = NSubjects) # Row-wise
}
}
return(matt)
asdf
asdf
}
)
schema <- function(Sites = NULL, NSubjects, RRatio = NULL, NFactors){
# Start with 2 empty data matrices:
matt = matrix(NA, nrow = length(Sites), ncol = NSubjects)
final = matrix(NA, nrow = length(Sites)*NSubjects, ncol = NFactors+1)
# Assign names to each column, otherwise you'll get an error:
dimnames(matt) = list(Sites)
# Assign numbers to each subject @ each site:
for (i in Sites){
for (j in NSubjects){
matt[i, ] = rep(i, times = NSubjects) # Row-wise
}
}
return(matt)}
FINAL <- schema(Sites = c("AAA", "BBB", "CCC"), NSubjects = 30, RRatio = 1, NFactors = 3)
View(FINAL)
schema <- function(Sites = NULL, NSubjects, RRatio = NULL, NFactors){
# Start with 2 empty data matrices:
matt = matrix(NA, nrow = length(Sites), ncol = NSubjects)
final = matrix(NA, nrow = length(Sites)*NSubjects, ncol = NFactors+1)
# Assign names to each column, otherwise you'll get an error:
dimnames(matt) = list(Sites)
# Assign numbers to each subject @ each site:
for (i in Sites){
for (j in NSubjects){
matt[i, ] = rep(i, times = NSubjects) # Row-wise
}
}
# Return the transpose of the matrix:
matt = as.data.frame(t(matt)) # Turn into a dataframe as well
return(matt)}
FINAL <- schema(Sites = c("AAA", "BBB", "CCC"), NSubjects = 30, RRatio = 1, NFactors = 3)
Rcpp::sourceCpp('C++ Test.cpp')
n =  5
2+3+1+5
total = 11
print((n*(n-1)//2)-total)
print((n*(n-1)/2)-total)
print(((n*(n-1))/2)-total)
1+2+3+4+5
remainder = (n*(n-1)/2)
sum = 11
total = (n*(n-1)/2)
rm(remainder)
total = (n*(n+1)/2)
sum(c(1, 2, 3, 5))
(5*6)//2
(5*6)/2
test <- function(NSites, NSubjects){
a = c()
for (letter in LETTERS){
result = rep(letter, times = 3)
result = paste(result, collapse = "")
a[letter] = result
}
return(rep(a, each=NSubjects)[seq(1, NSites*NSubjects)])
}
result <- t(test(NSites = 3, NSubjects = 10))
result
result <- t(test(NSites = 26, NSubjects = 10))
result
result <- t(test(NSites = 27, NSubjects = 10))
result
df <- data.frame(Sites = result)
df <- data.frame(Sites = t(result))
df
View(df)
# Works for up to 26 sites
test <- function(NSites, NSubjects){
a = c()
for (letter in LETTERS){
result = rep(letter, times = 3)
result = paste(result, collapse = "")
a[letter] = result
}
b = rep(a, each=NSubjects)[seq(1, NSites*NSubjects)]
}
result <- t(test(NSites = 27, NSubjects = 10))
result
test <- function(NSites, NSubjects){
a = c()
for (letter in LETTERS){
result = rep(letter, times = 3)
result = paste(result, collapse = "")
a[letter] = result
}
b = rep(a, each=NSubjects)[seq(1, NSites*NSubjects)]
return(b)
}
result <- t(test(NSites = 27, NSubjects = 10))
result
result <- t(test(NSites = 30, NSubjects = 10))
result
test <- function(NSites, NSubjects){
a = c()
for (letter in LETTERS){
result = rep(letter, times = 3)
result = paste(result, collapse = "")
a[letter] = result
}
b = t(rep(a, each=NSubjects)[seq(1, NSites*NSubjects)])
return(b)
}
result <- test(NSites = 30, NSubjects = 10)
result
df <- data.frame(Sites = t(result))
View(df)
rm(list = ls())
test <- function(Sites, NSubjects){
a = c()
for (letter in LETTERS){
result = rep(letter, times = 3)
result = paste(result, collapse = "")
a[letter] = result
}
b = t(rep(a, each = NSubjects)[seq(1, Sites*NSubjects)])
return(b)
}
result <- test(NSites = 30, NSubjects = 10)
df <- data.frame(Sites = t(result))
test <- function(Sites, NSubjects){
a = c()
for (letter in LETTERS){
result = rep(letter, times = 3)
result = paste(result, collapse = "")
a[letter] = result
}
b = t(rep(a, each = NSubjects)[seq(1, Sites*NSubjects)])
return(b)
}
result <- test(Sites = 30, NSubjects = 10)
df <- data.frame(Sites = t(result))
View(df)
library(testthat)
sqrt <- function(x){
return(sqrt(x))
}
test_that("Test sqrt function:", {
expected = 2
actual = sqrt(4)
expect_equal(expected, actual)
})
library(testthat)
test_that("Test sqrt function:", {
expected = 2
actual = sqrt_newton(4, 1)
expect_equal(expected, actual)
})
sqrt_newton <- function(a, init, eps = 0.01, iter = 100){
stopifnot(a >= 0)
i <- 1
while(abs(init**2 - a) > eps){
init <- 1/2 *(init + a/init)
i <- i + 1
if(i > iter) stop("Maximum number of iterations reached")
}
return(init)
}
test_that("Test sqrt function:", {
expected = 2
actual = sqrt_newton(4, 1)
expect_equal(expected, actual)
})
test_that("Test sqrt function:", {
expected = c(2, 4, 5)
actual = sqrt_newton(c(4, 16, 25), 1)
expect_equal(expected, actual)
})
test_that("Test sqrt function:", {
expected = c(2, 4, 5)
actual = sqrt_newton(c(4, 16, 25), 1)
expect_equal(expected, actual)
})
library(devtools)
devtools::create("myfirstpackage")
devtools::document()
library(devtools)
install.packages("devtools")
library(devtools)
install.packages("backports")
library(devtools)
install.packages("rlang")
library(Randomizations)
library(rlang)
library(tidyverse) # For the unite and row_number functions
library(devtools)
library(devtools)
library(ggplot2)
ggplot(data = diamonds, aes(x = carat)) +
geom_histogram()
library(Randomizations)
install.packages(c("libcoin", "pbapply", "StanHeaders"))
library(libcoin)
library(ggplot2)
library(Randomizations)
library(dplyr)
library(tidyverse)
install.packages("backports")
library(tidyverse)
library(Randomizations)
Randomizations::schema(Sites = c("AAA", "BBB"), NSubjects = 10, BlockSize = 5, RRatio = 1)
library(Randomizations)
schema(1, 10, 0, 1)
library(Randomizations)
schema(1,10,1,1)
library(Randomizations)
Randomizations::schema(Sites = c("AAA"), NSubjects = 10, BlockSize = NULL, RRatio = 1)
Randomizations::schema(Sites = c("AAA"), NSubjects = 10, BlockSize = NULL, RRatio = 1)
library(tidyverse)
Randomizations::schema(Sites = c("AAA"), NSubjects = 10, BlockSize = NULL, RRatio = 1)
install.packages("C:/Users/miqui/OneDrive/Consulting/Randomizations_1.0.tar.gz", repos = NULL, type = "source")
library(Randomizations)
setwd("C:/Users/miqui/OneDrive/Consulting/Randomizations")
library(tidyverse) # For the unite and row_number functions
schema <- function(Sites = NULL, NSubjects, BlockSize = NULL, RRatio = NULL, seed){
# Set the seed for reproducibility:
if (!missing(seed))
set.seed(seed)
### Error-checking: ###
# Null value for sites:
if (is.null(Sites) == TRUE){
stop("Please enter either an integer or site prefixes")
}
# Unique site codes:
test1 = any(duplicated(Sites))
if (test1 == TRUE){
stop("Please enter unique site codes")
}
# Non-positive number of sites:
if (is.numeric(Sites) && Sites <= 0){
stop("Please enter a valid number of sites (>=1)")
}
# Non-positive number of subjects:
test2 <- any(NSubjects <= 0)
if (test2 == TRUE){
stop("Please enter a positive integer for the number of subjects per site")
}
# Improper Randomization Ratio:
if (is.character(RRatio) == TRUE){
stop("The randomization ratio must be a numeric data type")
}
test3 <- NSubjects*(RRatio/(RRatio+1))%%1 == 0
if (test3 == TRUE){
stop("The randomization ratio must adhere to NSubjects*(RRatio/RRatio+1)%%1 = 0")
}
if (RRatio <= 0){
stop("The randomization ratio must be greater than 0")
}
# Designing the schema:
# If the input to sites is a NUMERIC number
if (is.numeric(Sites) == TRUE){ # Test if a numeric number
matt = c() # Start with an empty vector
final = matrix(NA, nrow = Sites*NSubjects, ncol = 1) # Add an empty matrix
for (letter in LETTERS){ # For each letter in the uppercase(Alphabet):
result = rep(letter, times = 3) # Repeat each letter 3 times
result = paste(result, collapse = "") # Combine the result into 1 string
matt[letter] = result # Assigns the result to the previously empty vector "matt"
} # Now that we have assigned the letters to the vector "matt"
matt = data.frame(t(matt)) # Transpose "matt"
matt = matt %>% # For each site code in your input:
uncount(NSubjects) # Duplicate the site code NSubjects number of times
matt = matt[1:NSubjects, 1:Sites] # Removing redundant codes
rownames(matt) = NULL
}
# If the input to sites is a CHARACTER vector
else if (is.vector(Sites) == TRUE){
matt = matrix(NA, nrow = length(Sites), ncol = NSubjects)  # Start with an empty data matrix
dimnames(matt) = list(Sites) # Must include or won't run
final = matrix(NA, nrow = length(Sites)*NSubjects, ncol = 1) # Start with an empty data matrix
for (i in Sites){ # For each site:
for (j in NSubjects){ # And for each subject
matt[i, ] = rep(i, times = NSubjects) # Row-wise assignment of letters
}
}
matt = as.data.frame(t(matt)) # Transpose and turn into a dataframe for reasonable viewing
rownames(matt) = NULL # Replace unnecessary rownames
matt = data.frame(matt)
}
# Adding the numbers to the end via a simple if-then-else statement
if (is.numeric(Sites) && Sites == 1){
matt = ifelse(row_number(matt) < 10, # If the row-number is less than 10:
yes = paste(matt, "0", row_number(matt), sep = ""), # Assign a 0 between letter and number
no = paste(matt, row_number(matt), sep = "")) # Otherwise: assign no space between letters and number
row.names(matt) = NULL
matt = data.frame(matt)
}
else { # For all other cases:
for (column in matt){ # For each column in the "matt" matrix
matt[column, ] = if_else(row_number(column) < 10, # Same instructions as above
true = paste(column, "0", row_number(column), sep = ""),
false = paste(column, row_number(column), sep = ""))
}
row.names(matt) = NULL
matt = matt[NSubjects+1:(nrow(matt)-NSubjects), 1] # Only keep the first column and a subset of rows
}
for (i in (NSubjects+1)){ # +1 because it will drop off at NSubjects otherwise
timesT = NSubjects*(RRatio/(RRatio+1)) # Calculates the number of Ts to assign
timesC = (NSubjects - timesT) # Calculates the number of Cs to assign
TLC = data.frame(TorC = sample(t(rep(c("T", "C"), times = c(timesT, timesC))))) # Concatenates and puts into a dataframe
}
# Repeat the process above for each site
# Must assign special cases for 1 dimensional and N>1 dimensional matrices
TLC = data.frame(TorC = rep(TLC$TorC, times = ifelse(is.numeric(Sites),
yes = Sites,
no = length(Sites))))
# Shuffle the data randomly:
matt = sample(matt)
# Turn the data matrix into a data.frame:
matt = as.data.frame(matt)
# Concatenate both objects into a single dataframe
result = data.frame(c(TLC, matt))
# Use the "unite" function to concatenate both columns into a single column
result = result %>% # using the pipe operator from the dplyr syntax
unite(Codes, c("matt", "TorC"), sep = "")
# For each column, append the result to the previously empty matrix above
for(column in 0:1){
final[, column] <- result[ , 1] # Copy only the first column
}
# Turn into a dataframe:
final <- as.data.frame(final)
# Extracting different parts of the codes for easier reading:
final["Code"] = final[, 1]
final["Site"] =  substr(final[, 1], 1, 3) # extract first three letters from code
final["Subject"] =  gsub("[a-zA-Z]+", "", final[, 1]) # remove letters with regex
final["Group"] = substr(final[, 1], nchar(final[, 1]), nchar(final[, 1]))
# Remove the repetitive column:
final = final %>% select(Code, Site, Subject, Group)
# Return the end result:
return(final)
}
test1 <- schema(Sites = c("AAA"), NSubjects = 10, RRatio = 1, seed = 123)
test1
test2 <- schema(Sites = c("AAA"), NSubjects = 10, RRatio = 1, seed = 123)
test2
schema <- function(Sites = NULL, NSubjects, BlockSize = NULL, RRatio = NULL, seed){
# Set the seed for reproducibility:
if (!missing(seed))
set.seed(seed)
### Error-checking: ###
# Null value for sites:
if (is.null(Sites) == TRUE){
stop("Please enter either an integer or site prefixes")
}
# Unique site codes:
test1 = any(duplicated(Sites))
if (test1 == TRUE){
stop("Please enter unique site codes")
}
# Non-positive number of sites:
if (is.numeric(Sites) && Sites <= 0){
stop("Please enter a valid number of sites (>=1)")
}
# Non-positive number of subjects:
test2 <- any(NSubjects <= 0)
if (test2 == TRUE){
stop("Please enter a positive integer for the number of subjects per site")
}
# Improper Randomization Ratio:
if (is.character(RRatio) == TRUE){
stop("The randomization ratio must be a numeric data type")
}
test3 <- NSubjects*(RRatio/(RRatio+1))%%1 == 0
if (test3 == TRUE){
stop("The randomization ratio must adhere to NSubjects*(RRatio/RRatio+1)%%1 = 0")
}
if (RRatio <= 0){
stop("The randomization ratio must be greater than 0")
}
# Designing the schema:
# If the input to sites is a NUMERIC number
if (is.numeric(Sites) == TRUE){ # Test if a numeric number
matt = c() # Start with an empty vector
final = matrix(NA, nrow = Sites*NSubjects, ncol = 1) # Add an empty matrix
for (letter in LETTERS){ # For each letter in the uppercase(Alphabet):
result = rep(letter, times = 3) # Repeat each letter 3 times
result = paste(result, collapse = "") # Combine the result into 1 string
matt[letter] = result # Assigns the result to the previously empty vector "matt"
} # Now that we have assigned the letters to the vector "matt"
matt = data.frame(t(matt)) # Transpose "matt"
matt = matt %>% # For each site code in your input:
uncount(NSubjects) # Duplicate the site code NSubjects number of times
matt = matt[1:NSubjects, 1:Sites] # Removing redundant codes
rownames(matt) = NULL
}
# If the input to sites is a CHARACTER vector
else if (is.vector(Sites) == TRUE){
matt = matrix(NA, nrow = length(Sites), ncol = NSubjects)  # Start with an empty data matrix
dimnames(matt) = list(Sites) # Must include or won't run
final = matrix(NA, nrow = length(Sites)*NSubjects, ncol = 1) # Start with an empty data matrix
for (i in Sites){ # For each site:
for (j in NSubjects){ # And for each subject
matt[i, ] = rep(i, times = NSubjects) # Row-wise assignment of letters
}
}
matt = as.data.frame(t(matt)) # Transpose and turn into a dataframe for reasonable viewing
rownames(matt) = NULL # Replace unnecessary rownames
matt = data.frame(matt)
}
# Adding the numbers to the end via a simple if-then-else statement
if (is.numeric(Sites) && Sites == 1){
matt = ifelse(row_number(matt) < 10, # If the row-number is less than 10:
yes = paste(matt, "0", row_number(matt), sep = ""), # Assign a 0 between letter and number
no = paste(matt, row_number(matt), sep = "")) # Otherwise: assign no space between letters and number
row.names(matt) = NULL
matt = data.frame(matt)
}
else { # For all other cases:
for (column in matt){ # For each column in the "matt" matrix
matt[column, ] = if_else(row_number(column) < 10, # Same instructions as above
true = paste(column, "0", row_number(column), sep = ""),
false = paste(column, row_number(column), sep = ""))
}
row.names(matt) = NULL
matt = matt[NSubjects+1:(nrow(matt)-NSubjects), 1] # Only keep the first column and a subset of rows
}
for (i in (NSubjects+1)){ # +1 because it will drop off at NSubjects otherwise
timesT = NSubjects*(RRatio/(RRatio+1)) # Calculates the number of Ts to assign
timesC = (NSubjects - timesT) # Calculates the number of Cs to assign
TLC = data.frame(TorC = sample(t(rep(c("T", "C"), times = c(timesT, timesC))))) # Concatenates and puts into a dataframe
}
# Repeat the process above for each site
# Must assign special cases for 1 dimensional and N>1 dimensional matrices
TLC = data.frame(TorC = rep(TLC$TorC, times = ifelse(is.numeric(Sites),
yes = Sites,
no = length(Sites))))
# Shuffle the data randomly:
matt = sample(matt)
# Turn the data matrix into a data.frame:
matt = as.data.frame(matt)
# Concatenate both objects into a single dataframe
result = data.frame(c(TLC, matt))
# Use the "unite" function to concatenate both columns into a single column
result = result %>% # using the pipe operator from the dplyr syntax
unite(Codes, c("matt", "TorC"), sep = "")
# For each column, append the result to the previously empty matrix above
for(column in 0:1){
final[, column] <- result[ , 1] # Copy only the first column
}
# Turn into a dataframe:
final <- as.data.frame(final)
# Extracting different parts of the codes for easier reading:
final["Code"] = final[, 1]
final["Site"] =  substr(final[, 1], 1, 3) # extract first three letters from code
final["Subject"] =  gsub("[a-zA-Z]+", "", final[, 1]) # remove letters with regex
final["Group"] = substr(final[, 1], nchar(final[, 1]), nchar(final[, 1]))
# Remove the repetitive column:
final = final %>% select(Code, Site, Subject, Group)
# Return the end result:
return(final)
}
test1 <- schema(Sites = c("AAA"), NSubjects = 10, RRatio = 1)
test1
test1 <- schema(Sites = c("AAA"), NSubjects = 10, RRatio = 1, seed = 123)
test1
library(Randomizations)
schema(1,10,1,1)
?Randomizations
?schema
library(Randomizations)
library(Randomizations)
library(devtools)
devtools::install_github("https://github.com/N3uralN3twork/Consulting/tree/master/Randomizations")
devtools::install_github("N3uralN3twork/Consulting/tree/master/Randomizations")
install_github(repo = "N3uralN3twork/Consulting")
install_github(repo = "N3uralN3twork/Consulting/Randomizations")
library(devtools)
install_github(repo = "N3uralN3twork/Consulting/Randomizations")
install_github(repo = "N3uralN3twork/Consulting")
library(devtools)
install_github(repo = "N3uralN3twork/Consulting/Randomizations",
dependencies = TRUE)
install_github(repo = "N3uralN3twork/Consulting/Randomizations",
dependencies = TRUE)
install_github(repo = "N3uralN3twork/Consulting/Randomizations",
dependencies = TRUE)
install_github(repo = "N3uralN3twork/Consulting/Randomizations",
dependencies = TRUE)
library(devtools)
library(devtools)
install.packages("devtools")
library(devtools)
install.packages("backports")
library(devtools)
library(Randomizations)
install_github(repo = "N3uralN3twork/Consulting/Randomizations")
