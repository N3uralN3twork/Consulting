install.packages(c("caret", "lavaan", "ggplot2", "dplyr"))
a <- 3
print(a)
# Building the design schema for 1 site:
SCHEMA <- function(prefix = "AAA", NSubjects, NSites=1, NFactors, RRatio=1){
row_count = (NSubjects * NSites)
col_count = (NFactors)
result <- vector("list", length = NSubjects)
for (i in seq(1, NSubjects)){
if (i < 10){
result[[i]] <- paste(prefix, i, sep = "0")
} else {
result[[i]] <- paste(prefix, i, sep = "")}}
result <- t(as.data.frame(result))
TLC = data.frame(TorC = sample(t(rep(c("T", "C"), times = c(5, 5)))))
mattrix <- matrix(nrow = row_count, ncol = col_count)
final = data.frame(ID = result, mattrix, row.names = NULL)
final = final[sample(nrow(final)), ]
final = data.frame(Order = 1:row_count, final)
final = data.frame(ID = paste(final$ID, TLC$TorC, sep = ""), Order = seq(1:row_count), mattrix, row.names = NULL)
return(final)
}
matt = SCHEMA(prefix = "AAA", NSubjects = 10, NFactors = 3, RRatio = 1)
View(matt)
# Multiple Sites:
library(dplyr)
library(magicfor)
test <- function(Sites = NULL, NSubjects){
matt = matrix(NA, nrow = length(Sites), ncol = NSubjects) # Start with an empty matrix
dimnames(matt) = list(Sites)
for (i in Sites){
for (j in NSubjects){
matt[i, ] = rep(i, NSubjects)
}
}
matt = as.data.frame(t(matt)) # Return the transpose of the matrix
return(matt)
}
asdf <- test(Sites = c("AAA", "BBB", "CCC", "DDD"), NSubjects = 20)
magic_for(print, silent = TRUE)
for (column in asdf){
result = if_else(row_number(column) < 10,
true = paste(column, "0", row_number(column), sep = ""),
false = paste(column, row_number(column), sep = ""))
print(result)
}
result <- magic_result_as_dataframe(iter = FALSE)
View(result)
View(result)
test <- function(Sites = NULL, NSubjects){
matt = matrix(NA, nrow = length(Sites), ncol = NSubjects) # Start with an empty matrix
dimnames(matt) = list(Sites)
for (i in Sites){
for (j in NSubjects){
matt[i, ] = rep(i, NSubjects)
}
}
matt = as.data.frame(t(matt)) # Return the transpose of the matrix
magic_for(print, silent = TRUE)
for (column in matt) {
result = if_else(row_number(column) < 10,
true = paste(column, "0", row_number(column), sep = ""),
false = paste(column, row_number(column), sep = ""))
print(result)
}
result = magic_result_as_dataframe(iter = FALSE)
}
test(Sites = c("AAA", "BBB"), NSubjects = 2)
test(Sites = c("AAA", "BBB"))
test(Sites = c("AAA", "BBB"), 2)
test <- function(Sites = NULL, NSubjects){
matt = matrix(NA, nrow = length(Sites), ncol = NSubjects) # Start with an empty matrix
dimnames(matt) = list(Sites)
for (i in Sites){
for (j in NSubjects){
matt[i, ] = rep(i, NSubjects)
}
}
matt = as.data.frame(t(matt)) # Return the transpose of the matrix
}
test(c("AAA", "BBB"), NSubjects = 5)
test(c("AAA", "BBB"), NSubjects = 5)
test <- function(Sites = NULL, NSubjects){
matt = matrix(NA, nrow = length(Sites), ncol = NSubjects) # Start with an empty matrix
dimnames(matt) = list(Sites)
for (i in Sites){
for (j in NSubjects){
matt[i, ] = rep(i, NSubjects)
}
}
matt = as.data.frame(t(matt)) # Return the transpose of the matrix
}
test(Sites = c("AAA", "BBB", "CCC", "DDD"), NSubjects = 20)
test <- function(Sites = NULL, NSubjects){
matt = matrix(NA, nrow = length(Sites), ncol = NSubjects) # Start with an empty matrix
dimnames(matt) = list(Sites)
for (i in Sites){
for (j in NSubjects){
matt[i, ] = rep(i, NSubjects)
}
}
matt = as.data.frame(t(matt)) # Return the transpose of the matrix
return(matt)
}
test(Sites = c("AAA", "BBB", "CCC", "DDD"), NSubjects = 20)
test <- function(Sites = NULL, NSubjects){
matt = matrix(NA, nrow = length(Sites), ncol = NSubjects) # Start with an empty matrix
dimnames(matt) = list(Sites)
for (i in Sites){
for (j in NSubjects){
matt[i, ] = rep(i, NSubjects)
}
}
matt = as.data.frame(t(matt)) # Return the transpose of the matrix
return(matt)
}
asdf <- test(Sites = c("AAA", "BBB", "CCC", "DDD"), NSubjects = 20)
setwd("C:/Users/miqui/OneDrive/Consulting/Randomizations")
#######################
### Multiple Sites: ###
#######################
# Multiple Sites:
library(tidyverse) # For the unite function and row_number function
test <- function(Sites = NULL, NSubjects, RRatio = NULL){
# Start with an empty data matrix
matt = matrix(NA, nrow = length(Sites), ncol = NSubjects)
dimnames(matt) = list(Sites)
for (i in Sites){
for (j in NSubjects){
matt[i, ] = rep(i, NSubjects)
}
}
# Return the transpose of the matrix:
matt = as.data.frame(t(matt))
# Adding the numbers to the end:
for (column in matt){
matt[column, ] = if_else(row_number(column) < 10,
true = paste(column, "0", row_number(column), sep = ""),
false = paste(column, row_number(column), sep = ""))
}
row.names(matt) = NULL
#Select the first column & rows between [nrow(data) -> NSubjects]:
matt = matt[NSubjects+1:(nrow(matt)-NSubjects), 1]
########### PUT THE T's and C's section in HERE!!!!!!!!!!!!!!!!!!
for (i in (NSubjects+1)){
timesT = NSubjects*(RRatio/(RRatio+1))
timesC = (NSubjects - timesT)
TLC = data.frame(TorC = sample(t(rep(c("T", "C"), times = c(timesT, timesC)))))
}
TLC = data.frame(TorC = rep(TLC$TorC, times = length(Sites)))
# Shuffle the data randomly:
matt = sample(matt)
# Turn into a data.frame:
matt = as.data.frame(matt)
# Concatenate both objects into a single dataframe
result = data.frame(c(TLC, matt))
# Use the "unite" function to concatenate both columns into a single column
result = result %>%
unite(Codes, c("matt", "TorC"), sep = "")
# Return the end result:
return(result)
}
FINAL <- test(Sites = c("AAA", "BBB", "CCC"), NSubjects = 30, RRatio = 1)
View(FINAL)
